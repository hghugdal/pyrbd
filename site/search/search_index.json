{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"index.html#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"index.html#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"reference/block.html","title":"Block","text":""},{"location":"reference/block.html#pyrbd.block","title":"<code>block</code>","text":"<p>Module containing Block class definition.</p>"},{"location":"reference/block.html#pyrbd.block.Block","title":"<code>Block</code>","text":"<p>Block entering a reliability block diagram.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>block text string</p> required <code>color</code> <code>str</code> <p>block color</p> required <code>parent</code> <code>Block</code> <p>parent <code>Block</code> instance</p> <code>None</code> <code>shift</code> <code>float</code> <p>additional position shift relative to <code>parent</code> <code>Block</code> instance</p> <code>None</code> <p>Attributes:</p> Name Type Description <code>text</code> <code>str</code> <p>block text string</p> <code>color</code> <code>str</code> <p>block color</p> <code>parent</code> <code>Block | None</code> <p>parent <code>Block</code> instance or <code>None</code></p> <code>shift</code> <code>float</code> <p>additional position shift relative to <code>parent</code> <code>Block</code> instance</p> <code>position</code> <code>str</code> <p>string defining the block position</p> <code>options</code> <code>str</code> <p>TikZ node formatting options</p> Source code in <code>pyrbd/block.py</code> <pre><code>class Block:\n    \"\"\"Block entering a reliability block diagram.\n\n    Parameters\n    ----------\n    text : str\n        block text string\n    color : str\n        block color\n    parent : Block, optional\n        parent `Block` instance\n    shift : float, optional\n        additional position shift relative to `parent` `Block` instance\n\n    Attributes\n    ----------\n    text : str\n        block text string\n    color : str\n        block color\n    parent : Block | None\n        parent `Block` instance or `None`\n    shift : float\n        additional position shift relative to `parent` `Block` instance\n    position : str\n        string defining the block position\n    options : str\n        TikZ node formatting options\n\n    \"\"\"\n\n    options: str = \", \".join(\n        [\n            \"anchor=west\",\n            \"fill={fill_color}\",\n            \"draw=black\",\n            \"minimum height=1cm\",\n            \"rounded corners=1mm\",\n        ]\n    )\n\n    def __init__(\n        self,\n        text: str,\n        color: str,\n        parent: Optional[\"Block\"] = None,\n        shift: Optional[float] = None,\n    ) -&gt; None:\n        self.text = text\n        self.color = color\n        self.parent = parent\n        self.shift = shift\n        self.id: int = self.parent.id + 1 if self.parent is not None else 1\n\n    @property\n    def position(self) -&gt; str:\n        \"\"\"Block position.\"\"\"\n\n        if self.parent is None:\n            return \"\"\n\n        return f\"[right=of {self.parent.id}]\"\n\n    @property\n    def arrow(self) -&gt; str:\n        \"\"\"Get TikZ arrow string.\"\"\"\n\n        if self.parent is None:\n            return \"\"\n\n        return f\"\\\\draw[-latex, thick] ({self.parent.id}.east) -- ({self.id}.west);\\n\"\n\n    def get_node(self) -&gt; str:\n        \"\"\"Get TikZ node string.\"\"\"\n\n        node = \" \".join(\n            [\n                f\"\\\\node[{self.options.format(fill_color=self.color)}]\",\n                f\"({self.id})\",\n                self.position,\n                f\"{{{self.text}}};\\n\",\n                self.arrow\n            ]\n        )\n        return node\n</code></pre>"},{"location":"reference/block.html#pyrbd.block.Block.arrow","title":"<code>arrow</code>  <code>property</code>","text":"<p>Get TikZ arrow string.</p>"},{"location":"reference/block.html#pyrbd.block.Block.position","title":"<code>position</code>  <code>property</code>","text":"<p>Block position.</p>"},{"location":"reference/block.html#pyrbd.block.Block.get_node","title":"<code>get_node()</code>","text":"<p>Get TikZ node string.</p> Source code in <code>pyrbd/block.py</code> <pre><code>def get_node(self) -&gt; str:\n    \"\"\"Get TikZ node string.\"\"\"\n\n    node = \" \".join(\n        [\n            f\"\\\\node[{self.options.format(fill_color=self.color)}]\",\n            f\"({self.id})\",\n            self.position,\n            f\"{{{self.text}}};\\n\",\n            self.arrow\n        ]\n    )\n    return node\n</code></pre>"},{"location":"reference/diagram.html","title":"Diagram","text":""},{"location":"reference/diagram.html#pyrbd.diagram","title":"<code>diagram</code>","text":"<p>Module containing Diagram class definition.</p>"},{"location":"reference/diagram.html#pyrbd.diagram.Diagram","title":"<code>Diagram</code>","text":"<p>Reliability block diagram class definition.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>name of diagram</p> required <code>blocks</code> <code>list</code> <p>(nested) list of <code>Block</code> instances</p> required <code>hazard</code> <code>str</code> <p>string defining the <code>hazard</code> block text</p> <code>''</code> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>diagram name</p> <code>blocks</code> <code>list</code> <p>(nested) list of <code>Block</code> instances entering the block diagram</p> <code>head</code> <code>Block</code> <p>first block in diagram</p> Source code in <code>pyrbd/diagram.py</code> <pre><code>class Diagram:\n    \"\"\"Reliability block diagram class definition.\n\n    Parameters\n    ----------\n    name : str\n        name of diagram\n    blocks : list\n        (nested) list of `Block` instances\n    hazard : str, optional\n        string defining the `hazard` block text\n\n    Attributes\n    ----------\n    name : str\n        diagram name\n    blocks : list\n        (nested) list of `Block` instances entering the block diagram\n    head : Block\n        first block in diagram\n    \"\"\"\n\n    preamble = \"\\n\".join(\n        [\n            r\"\\documentclass{standalone}\",\n            r\"\\usepackage{tikz}\",\n            r\"\\usetikzlibrary{positioning}\",\n            r\"\\begin{document}\",\n            r\"\\begin{tikzpicture}\",\n            \"\",\n        ]\n    )\n\n    end = \"\\n\".join(\n        [\n            r\"\\end{tikzpicture}\",\n            r\"\\end{document}\",\n        ]\n    )\n\n    def __init__(self, name: str, blocks: list, hazard: str = \"\") -&gt; None:\n        self.name = name\n        self.head = Block(hazard, \"red!60\")\n        self.head.id = 0\n        self.blocks = blocks\n\n        self.blocks[0].parent = self.head\n\n    def write(self) -&gt; None:\n        \"\"\"Write diagram to .tex file.\"\"\"\n\n        with open(f\"{self.name}.tex\", mode=\"w\", encoding=\"utf-8\") as file:\n            file.write(self.preamble)\n            file.write(self.head.get_node())\n            for block in self.blocks:\n                file.write(block.get_node())\n            file.write(self.end)\n\n    def compile(self) -&gt; None:\n        \"\"\"Compile diagram .tex file.\"\"\"\n\n        check_call([\"latexmk\", f\"{self.name}.tex\"])\n</code></pre>"},{"location":"reference/diagram.html#pyrbd.diagram.Diagram.compile","title":"<code>compile()</code>","text":"<p>Compile diagram .tex file.</p> Source code in <code>pyrbd/diagram.py</code> <pre><code>def compile(self) -&gt; None:\n    \"\"\"Compile diagram .tex file.\"\"\"\n\n    check_call([\"latexmk\", f\"{self.name}.tex\"])\n</code></pre>"},{"location":"reference/diagram.html#pyrbd.diagram.Diagram.write","title":"<code>write()</code>","text":"<p>Write diagram to .tex file.</p> Source code in <code>pyrbd/diagram.py</code> <pre><code>def write(self) -&gt; None:\n    \"\"\"Write diagram to .tex file.\"\"\"\n\n    with open(f\"{self.name}.tex\", mode=\"w\", encoding=\"utf-8\") as file:\n        file.write(self.preamble)\n        file.write(self.head.get_node())\n        for block in self.blocks:\n            file.write(block.get_node())\n        file.write(self.end)\n</code></pre>"},{"location":"reference/group.html","title":"Group","text":""},{"location":"reference/group.html#pyrbd.group","title":"<code>group</code>","text":"<p>Definition of Group class for vertically stacking grouped <code>Block</code> instances.</p>"},{"location":"reference/group.html#pyrbd.group.Group","title":"<code>Group</code>","text":"<p>               Bases: <code>Block</code></p> <p>Group of <code>Block</code> instances for vertical stacking.</p> Source code in <code>pyrbd/group.py</code> <pre><code>class Group(Block):\n    \"\"\"Group of `Block` instances for vertical stacking.\"\"\"\n\n    def __init__(self, blocks: list[\"Block\"], parent: Optional[\"Block\"] = None) -&gt; None:\n        self.blocks = blocks\n        Block.__init__(self, \"\", blocks[0].color, parent=parent)\n\n    def get_node(self) -&gt; str:\n\n        \"\"\"Get TikZ node string.\"\"\"\n\n        node = \" \".join(\n            [\n                f\"\\\\node[{self.options.format(fill_color=self.color)}]\",\n                f\"({self.id})\",\n                self.position,\n                f\"{{{self.text}}};\\n\",\n                self.arrow\n            ]\n        )\n        return node\n</code></pre>"},{"location":"reference/group.html#pyrbd.group.Group.get_node","title":"<code>get_node()</code>","text":"<p>Get TikZ node string.</p> Source code in <code>pyrbd/group.py</code> <pre><code>def get_node(self) -&gt; str:\n\n    \"\"\"Get TikZ node string.\"\"\"\n\n    node = \" \".join(\n        [\n            f\"\\\\node[{self.options.format(fill_color=self.color)}]\",\n            f\"({self.id})\",\n            self.position,\n            f\"{{{self.text}}};\\n\",\n            self.arrow\n        ]\n    )\n    return node\n</code></pre>"}]}